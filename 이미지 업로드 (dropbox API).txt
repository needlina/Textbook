--- CS 단 메소드 생성 ---

[HttpPost]
public JsonResult ImageUpload()
{
    DropboxClient dropboxClient = new DropboxClient("5JDFm84qP34AAAAAAACSa8H30nIt2ODws2nbvVXAqQEcn7v2uoliJte-EgYrhKo-");

    // 이미지 파일 읽기 - 파일 정보
    var uploadFile = Request.Form.Files[0];
    string fileExt = uploadFile.FileName.Split(".")[1];
    string fileName = string.Format(@"{0}.{1}", Guid.NewGuid(), fileExt);
    Stream fileStream = uploadFile.OpenReadStream();

    // Dropbox Client API에 업로드
    string dropboxPath = @"/" + DateTime.Today.ToShortDateString() + "/" + fileName;
    FileMetadata fileMetaData = dropboxClient.Files.UploadAsync(new CommitInfo(dropboxPath), fileStream).Result;

    // Dropbox Client에 업로드 한 후 공유 링크 URL 생성
    SharedLinkMetadata sharedLinkMetadata = dropboxClient.Sharing.CreateSharedLinkWithSettingsAsync(fileMetaData.PathDisplay).Result;

    // Return URL
    var model = new 
    {
        // dl=1로 해야 다운로드 가능하므로 replace 처리
        Url = sharedLinkMetadata.Url.Replace("dl=0", "dl=1")
    };
    return Json(new { Data = model });

}

--- Javascript ---
<script>
    class DropboxUploadAdapter {
        constructor(loader, url) {
            // The FileLoader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;

            // The upload URL in your server back-end. This is the address the XMLHttpRequest
            // will send the image data to.
            this.url = url;
        }

        // Starts the upload process.
        upload() {
            return new Promise((resolve, reject) => {
                this._initRequest();
                this._initListeners(resolve, reject);
                this._sendRequest();
            });
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // the POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', this.url, true);
            xhr.responseType = 'json';
        }

        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = 'Couldn\'t upload file:' + ` ${loader.file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The FileLoader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        // Prepares the data and sends the request.
        _sendRequest() {
            // Prepare the form data.
            const data = new FormData();
            data.append('upload', this.loader.file);

            // Send the request.
            this.xhr.send(data);
        }
    }

    function DropboxUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new DropboxUploadAdapter(loader, 'https://localhost:44345/home/ImageUpload');
        };
    }

    ClassicEditor
        .create(document.querySelector('#editor'), {
            extraPlugins: [DropboxUploadAdapterPlugin],
        })
        .catch(error => {
            console.error(error);
        });
</script>
